# 9085 더하기
# 문제
# 10보다 작거나 같은 자연수 N개를 주면 합을 구하는 프로그램을 작성하시오.

# 입력
# 입력의 첫 줄에는 테스트 케이스의 개수 T(1 ≤ T ≤ 10)가 주어진다. 각 테스트 케이스는 첫 줄에 자연수의 개수 N(1 ≤ N ≤ 100)이 주어지고, 그 다음 줄에는 N개의 자연수가 주어진다. 각각의 자연수 사이에는 하나씩의 공백이 있다.

# 출력
# 각 테스트 케이스에 대해서 주어진 자연수의 합을 한 줄에 하나씩 출력한다.

T = int(input())
for i in range(T):
    N = int(input())
    A = list(map(int, input().split()))
    print(sum(A))

# 10824 네 수
# 문제
# 네 자연수 A, B, C, D가 주어진다. 이때, A와 B를 붙인 수와 C와 D를 붙인 수의 합을 구하는 프로그램을 작성하시오.

# 두 수 A와 B를 합치는 것은 A의 뒤에 B를 붙이는 것을 의미한다. 즉, 20과 30을 붙이면 2030이 된다.

# 입력
# 첫째 줄에 네 자연수 A, B, C, D가 주어진다. (1 ≤ A, B, C, D ≤ 1,000,000)

# 출력
# A와 B를 붙인 수와 C와 D를 붙인 수의 합을 출력한다.

A, B, C, D = input().split()
E = A+B
F = C+D
G = int(E) + int(F)
print(G)

# 3009 네 번째 점
# 문제
# 세 점이 주어졌을 때, 축에 평행한 직사각형을 만들기 위해서 필요한 네 번째 점을 찾는 프로그램을 작성하시오.

# 입력
# 세 점의 좌표가 한 줄에 하나씩 주어진다. 좌표는 1보다 크거나 같고, 1000보다 작거나 같은 정수이다.

# 출력
# 직사각형의 네 번째 점의 좌표를 출력한다.

a, b = map(int, input().split())
c, d = map(int, input().split())
e, f = map(int, input().split())
g = 0
h = 0

if a == c:
    g += e
elif c == e:
    g += a
elif a == e:
    g += c

if b == d:
    h += f
elif d == f:
    h += b
elif b == f:
    h += d

print(g, h)

# 10952 A+B - 5
# 문제
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.

# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다.

# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)

# 입력의 마지막에는 0 두 개가 들어온다.

# 출력
# 각 테스트 케이스마다 A+B를 출력한다.

while 1:
    a, b = map(int, input().split())
    if (a == 0 and b == 0):
        break
    else:
        print(a + b)

# 1110 더하기 사이클
# 문제
# 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

# 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

# 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

# N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.

# 출력
# 첫째 줄에 N의 사이클 길이를 출력한다.

N = int(input())
result = 0
while N < 0:
    N *= 10
    K = (N % 10 + N//10)
    result += 1
    if K == N:
        break
    print(result)

# """
# 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다.
# 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고,
# 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다.
#  다음 예를 보자.
# 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다.
# 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.
# 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
# N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.
# """

# # N 기준 / 반복문을 끝낼 기준
# # 기준은 바뀌면 X
# N = input()

# # N을 복사한 변수
# given_n = N

# # 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만든다.
# if int(given_n) < 10:
#     given_n = "0" + given_n # 앞에 0붙여서 두 자리수로 만든다.

# # 사이클 횟수
# cnt = 0
# while True:
#     #  각 자리의 숫자를 더한다.
#     first = given_n[-1] # 1의 자리 수
#     second = given_n[0] # 10의 자리 수
#     sum_number = int(first) + int(second)

#     # 주어진 수의 가장 오른쪽 자리 수와
#     # 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다.
#     # 주어진 수 N
#     # 구한 합 sum_number
#     new_number = given_n[-1] + str(sum_number)[-1]

#     # print(new_number)

#     # 연산 횟수 증가(사이클 횟수 증가)
#     cnt += 1

#     # 새로운 수가 기준과 같으면 반복문을 종료
#     if int(new_number) == int(N):
#         break

#     # new_number를 다시 N에 넣어줘요.
#     # N의 값을 새로운 수를 저장하면?
#     given_n = new_number

# print(cnt)
